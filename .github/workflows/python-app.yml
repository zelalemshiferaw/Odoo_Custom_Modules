# This workflow will install Python dependencies, run tests, and check the coverage

name: Test with coverage

on:
  pull_request:

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: 3.10
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
    - name: Test with pytest
      run: |
        package_name="${{ env.PACKAGE_NAME }}"
        test_directory="${{ env.TEST_DIRECTORY }}"
        py.test -o junit_family=xunit2 --junitxml result.xml -v --ff --cov=$package_name --cov-report=xml --cov-report=term $test_directory
      env:
        PACKAGE_NAME: ${{ github.event.pull_request.head.repo.name }}
        TEST_DIRECTORY: "tests/"
    - name: Coverage Report
      if: always()
      uses: aGallea/tests-coverage-report@1.3.1
      with:
        min-coverage-percentage: '100'
        fail-under-coverage-percentage: 'true'
        # cobertura-path: ./coverage.xml
        # junit-path: ./result.xml

        






# name: Python application

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

# permissions:
#   contents: read

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up Python 3.10
#       uses: actions/setup-python@v3
#       with:
#         python-version: "3.10"
#     - name: Test Coverage
#       run: |
#         pip install pytest
#         pip install coverage
#         coverage run -m pytest
#         coverage report

















# name: Python application

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

# permissions:
#   contents: read

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up Python 3.10
#       uses: actions/setup-python@v3
#       with:
#         python-version: "3.10"
#     # - name: Install dependencies
#     #   run: |
#     #     python -m pip install --upgrade pip
#     #     pip install flake8 pytest
#     #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#     # - name: Lint with flake8
#     #   run: |
#     #     # stop the build if there are Python syntax errors or undefined names
#     #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#     #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#     #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#     # - name: Test with pytest
#     #   run: |
#     #     pip install pytest
#     #     pytest
#     - name: Test Coverage
#       run: |
#         pip install pytest
#         pip install coverage
#         coverage run -m pytest
#         coverage report

